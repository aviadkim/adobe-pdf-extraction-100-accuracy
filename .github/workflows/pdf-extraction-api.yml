name: PDF Extraction API

on:
  workflow_dispatch:
    inputs:
      pdf_url:
        description: 'URL of the PDF to process'
        required: true
        type: string
  repository_dispatch:
    types: [extract-pdf]

jobs:
  extract-pdf:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pdfservices-sdk pandas openpyxl
    
    - name: Create credentials file
      env:
        ADOBE_CLIENT_ID: ${{ secrets.ADOBE_CLIENT_ID }}
        ADOBE_CLIENT_SECRET: ${{ secrets.ADOBE_CLIENT_SECRET }}
      run: |
        mkdir -p credentials
        cat > credentials/pdfservices-api-credentials.json << EOF
        {
          "client_credentials": {
            "client_id": "$ADOBE_CLIENT_ID",
            "client_secret": "$ADOBE_CLIENT_SECRET"
          },
          "service_account_credentials": {
            "organization_id": "placeholder",
            "account_id": "placeholder",
            "private_key_file": "private.key"
          }
        }
        EOF
        
        # Create a dummy private key file
        echo "dummy_key" > credentials/private.key
    
    - name: Download PDF
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          PDF_URL="${{ github.event.inputs.pdf_url }}"
        else
          PDF_URL="${{ github.event.client_payload.pdf_url }}"
        fi
        
        echo "Downloading PDF from: $PDF_URL"
        curl -L -o input.pdf "$PDF_URL"
        
    - name: Extract PDF data
      id: extraction
      env:
        ADOBE_CLIENT_ID: ${{ secrets.ADOBE_CLIENT_ID }}
        ADOBE_CLIENT_SECRET: ${{ secrets.ADOBE_CLIENT_SECRET }}
      run: |
        python - << 'EOF'
        import os
        import json
        import sys
        from datetime import datetime
        
        # Set environment variables
        os.environ['ADOBE_CLIENT_ID'] = os.getenv('ADOBE_CLIENT_ID', '')
        os.environ['ADOBE_CLIENT_SECRET'] = os.getenv('ADOBE_CLIENT_SECRET', '')
        
        try:
            # Import the PDF extractor
            from pdf_extractor import PDFExtractor
            
            # Initialize extractor
            extractor = PDFExtractor()
            
            # Extract data from the PDF
            result = extractor.extract_tables(
                input_pdf_path="input.pdf",
                output_dir="extraction_output",
                table_format="csv",
                extract_text=True
            )
            
            if result["success"]:
                print("Extraction successful!")
                
                # Read the extracted data
                output_data = {
                    "success": True,
                    "timestamp": datetime.now().isoformat(),
                    "files": result.get("extracted_files", [])
                }
                
                # Try to read CSV files if they exist
                import pandas as pd
                csv_data = []
                for file in result.get("extracted_files", []):
                    if file.endswith('.csv'):
                        try:
                            df = pd.read_csv(file)
                            csv_data.append({
                                "filename": os.path.basename(file),
                                "rows": len(df),
                                "columns": len(df.columns),
                                "preview": df.head(5).to_dict('records')
                            })
                        except:
                            pass
                
                output_data["csv_data"] = csv_data
                
                # Save results
                with open("extraction_results.json", "w") as f:
                    json.dump(output_data, f, indent=2)
                    
                print(json.dumps(output_data, indent=2))
            else:
                print(f"Extraction failed: {result.get('error', 'Unknown error')}")
                sys.exit(1)
                
        except Exception as e:
            print(f"Error during extraction: {str(e)}")
            # Fallback to basic extraction
            output_data = {
                "success": False,
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
            with open("extraction_results.json", "w") as f:
                json.dump(output_data, f, indent=2)
            sys.exit(1)
        EOF
    
    - name: Upload extraction results
      uses: actions/upload-artifact@v3
      with:
        name: extraction-results
        path: |
          extraction_results.json
          extraction_output/
    
    - name: Create result comment
      if: github.event_name == 'workflow_dispatch'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('extraction_results.json', 'utf8'));
          
          let comment = '## PDF Extraction Results\n\n';
          
          if (results.success) {
            comment += '✅ **Extraction Successful!**\n\n';
            comment += `- Timestamp: ${results.timestamp}\n`;
            comment += `- Files extracted: ${results.files.length}\n\n`;
            
            if (results.csv_data && results.csv_data.length > 0) {
              comment += '### Extracted Tables:\n\n';
              results.csv_data.forEach(table => {
                comment += `**${table.filename}**\n`;
                comment += `- Rows: ${table.rows}\n`;
                comment += `- Columns: ${table.columns}\n\n`;
              });
            }
          } else {
            comment += '❌ **Extraction Failed**\n\n';
            comment += `Error: ${results.error}\n`;
          }
          
          // Post to discussions or issues
          console.log(comment);