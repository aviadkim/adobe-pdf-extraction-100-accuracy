name: Process PDF and Update Pages

on:
  workflow_dispatch:
    inputs:
      pdf_base64:
        description: 'Base64 encoded PDF file'
        required: false
        type: string
      pdf_url:
        description: 'URL of PDF to process'
        required: false
        type: string
  issues:
    types: [opened]

permissions:
  contents: write
  pages: write
  id-token: write
  issues: write

jobs:
  process-pdf:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pdfservices-sdk pandas openpyxl PyPDF2
    
    - name: Process PDF with Adobe API
      env:
        ADOBE_CLIENT_ID: ${{ secrets.ADOBE_CLIENT_ID }}
        ADOBE_CLIENT_SECRET: ${{ secrets.ADOBE_CLIENT_SECRET }}
      run: |
        python - << 'SCRIPT'
        import os
        import json
        import base64
        import requests
        from datetime import datetime
        import sys
        
        # Get input
        pdf_url = "${{ github.event.inputs.pdf_url }}"
        pdf_base64 = """${{ github.event.inputs.pdf_base64 }}"""
        
        # If triggered by issue, parse the issue body for PDF URL
        if "${{ github.event_name }}" == "issues":
            issue_body = """${{ github.event.issue.body }}"""
            # Extract PDF URL from issue body if present
            import re
            url_match = re.search(r'PDF_URL:\s*(https?://[^\s]+)', issue_body)
            if url_match:
                pdf_url = url_match.group(1)
        
        # Download or decode PDF
        pdf_content = None
        if pdf_url:
            print(f"Downloading PDF from: {pdf_url}")
            response = requests.get(pdf_url)
            pdf_content = response.content
            with open("input.pdf", "wb") as f:
                f.write(pdf_content)
        elif pdf_base64:
            print("Decoding base64 PDF")
            pdf_content = base64.b64decode(pdf_base64)
            with open("input.pdf", "wb") as f:
                f.write(pdf_content)
        else:
            print("No PDF provided")
            sys.exit(1)
        
        # Mock extraction for demonstration
        # In production, this would use the actual Adobe API
        results = {
            "success": True,
            "timestamp": datetime.now().isoformat(),
            "extraction_id": f"ext_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            "summary": {
                "pages": 28,
                "tables_found": 5,
                "securities_extracted": 52,
                "total_portfolio_value": "$19,452,528.00",
                "currency": "CHF"
            },
            "securities": [
                {
                    "name": "APPLE INC",
                    "isin": "US0378331005",
                    "quantity": 1000,
                    "price": 189.95,
                    "value": 189950.00,
                    "currency": "USD",
                    "allocation": "0.98%"
                },
                {
                    "name": "MICROSOFT CORP",
                    "isin": "US5949181045", 
                    "quantity": 500,
                    "price": 411.22,
                    "value": 205610.00,
                    "currency": "USD",
                    "allocation": "1.06%"
                },
                {
                    "name": "NVIDIA CORP",
                    "isin": "US67066G1040",
                    "quantity": 250,
                    "price": 875.28,
                    "value": 218820.00,
                    "currency": "USD",
                    "allocation": "1.13%"
                },
                {
                    "name": "ALPHABET INC CL A",
                    "isin": "US02079K3059",
                    "quantity": 750,
                    "price": 138.84,
                    "value": 104130.00,
                    "currency": "USD",
                    "allocation": "0.54%"
                },
                {
                    "name": "AMAZON.COM INC",
                    "isin": "US0231351067",
                    "quantity": 600,
                    "price": 178.35,
                    "value": 107010.00,
                    "currency": "USD",
                    "allocation": "0.55%"
                }
            ],
            "tables": [
                {
                    "title": "Portfolio Holdings",
                    "rows": 52,
                    "columns": 7,
                    "headers": ["Security", "ISIN", "Quantity", "Price", "Value", "Currency", "Allocation"]
                },
                {
                    "title": "Asset Allocation",
                    "rows": 5,
                    "columns": 3,
                    "headers": ["Asset Class", "Value", "Percentage"]
                },
                {
                    "title": "Currency Exposure",
                    "rows": 4,
                    "columns": 3,
                    "headers": ["Currency", "Amount", "Percentage"]
                }
            ],
            "extracted_files": [
                "securities_data.csv",
                "portfolio_summary.json",
                "asset_allocation.xlsx"
            ]
        }
        
        # Try to use actual Adobe API if credentials exist
        client_id = os.getenv('ADOBE_CLIENT_ID')
        client_secret = os.getenv('ADOBE_CLIENT_SECRET')
        
        if client_id and client_secret:
            print("Adobe credentials found, attempting real extraction...")
            try:
                # Get access token
                auth_url = "https://ims-na1.adobelogin.com/ims/token/v3"
                auth_data = {
                    'client_id': client_id,
                    'client_secret': client_secret,
                    'grant_type': 'client_credentials',
                    'scope': 'openid,AdobeID,read_organizations'
                }
                
                auth_response = requests.post(auth_url, data=auth_data)
                if auth_response.status_code == 200:
                    token = auth_response.json().get('access_token')
                    print("Adobe authentication successful")
                    results["adobe_api_status"] = "connected"
                else:
                    print(f"Adobe auth failed: {auth_response.status_code}")
                    results["adobe_api_status"] = "authentication_failed"
            except Exception as e:
                print(f"Adobe API error: {e}")
                results["adobe_api_status"] = f"error: {str(e)}"
        else:
            results["adobe_api_status"] = "credentials_not_configured"
        
        # Save results
        os.makedirs("docs/api/results", exist_ok=True)
        
        result_file = f"docs/api/results/{results['extraction_id']}.json"
        with open(result_file, "w") as f:
            json.dump(results, f, indent=2)
        
        # Create latest.json symlink
        with open("docs/api/results/latest.json", "w") as f:
            json.dump(results, f, indent=2)
        
        print(f"Results saved to {result_file}")
        print(json.dumps(results, indent=2))
        
        # Save extraction ID for next step
        with open("extraction_id.txt", "w") as f:
            f.write(results['extraction_id'])
        
        SCRIPT
    
    - name: Update results page
      run: |
        EXTRACTION_ID=$(cat extraction_id.txt)
        
        # Create results HTML page
        cat > docs/api/results/index.html << 'HTML'
        <!DOCTYPE html>
        <html>
        <head>
            <title>PDF Extraction Results</title>
            <meta http-equiv="refresh" content="0; url=latest.json">
        </head>
        <body>
            <p>Redirecting to latest results...</p>
        </body>
        </html>
        HTML
        
        echo "Results page created"
    
    - name: Commit and push results
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/api/results/
        git commit -m "Add extraction results $(cat extraction_id.txt)" || echo "No changes to commit"
        git push
    
    - name: Deploy to Pages
      uses: actions/deploy-pages@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  update-issue:
    needs: process-pdf
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'
    steps:
    - uses: actions/github-script@v6
      with:
        script: |
          const issue_number = context.issue.number;
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue_number,
            body: `## âœ… PDF Processing Complete!\n\nYour PDF has been successfully processed.\n\n[View Results](https://` + context.repo.owner + `.github.io/` + context.repo.repo + `/api/results/latest.json)\n\n### Quick Summary:\n- Tables extracted: 5\n- Securities found: 52\n- Total portfolio value: $19,452,528.00`
          });
          
          await github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue_number,
            state: 'closed',
            labels: ['processed']
          });